// ============================================================================
// DO NOT EDIT!
//
// This file is dynamically generated by gulp-compass-imagehelper and
// polyfills the compass imagehelper functions to node-sass enviroments.
// https://www.npmjs.com/package/gulp-compass-imagehelper
// ============================================================================


@function compassImagehelper_getList($image) {
  @if map-has-key($compass-imagehelper-imagesmap, $image) {
    $list: map-get($compass-imagehelper-imagesmap, $image);
    @if type-of($list) == 'list' {
      @return $list;
    }
  }
  @warn 'Image `#{$image}` not found.';
  @return false;
}

// Embeds the contents of an image directly inside your stylesheet, eliminating the need for another HTTP request. For small images, this can be a performance
// benefit at the cost of a larger generated CSS file.
@function inline-image($image) {
  $list: compassImagehelper_getList($image);
  @return unquote(nth($list, 3));
}

// Returns the width of the image found at the path supplied by $image relative to your project's images directory.
@function image-width($image) {
  $list: compassImagehelper_getList($image);
  $width: nth($list, 1);
  @return $width * 1px;
}

// Returns the height of the image found at the path supplied by $image relative to your project's images directory.
@function image-height($image) {
  $list: compassImagehelper_getList($image);
  $height: nth($list, 2);
  @return $height * 1px;
}

// Generates a path to an asset found relative to the project's images directory.
// Passing a true value as the second argument will cause only the path to be returned instead of a url() function
// The third argument is used to control the cache buster on a per-use basis. When set to false no cache buster will be used.
// When true a md5-hash of the file is appended to the url. When a string, that value will be used as the cache buster.
@function image-url($image, $only-path: false, $cache-buster: false) {
  $result: '{{{path_prefix}}}' + $image;

  @if ($cache-buster == true) {
    @if not (image-exists($image)) {
      @warn 'Image `#{$image}` not found. Cache-busting failed';
    } @else if (map-has-key($compass-imagehelper-imagesmap, $image)) {
      $list: map-get($compass-imagehelper-imagesmap, $image);
      $hash: nth($list, 4);
      $result: $result + '?' + $hash;
    }
  } @else if ($cache-buster == false) {
  } @else {
    // probably a string
    $result: $result + '?' + $cache-buster;
  }
  $result: quote($result);
  @if ($only-path == false) {
    $result: url($result);
  }
  @return $result;
}

// Returns if the image is accessible for these image-helpers
// Note: Not part of the official compass functions, but still useful
@function image-exists($image) {
  @return map-has-key($compass-imagehelper-imagesmap, $image);
}


$compass-imagehelper-imagesmap:(
{{#items}}
    '{{{path}}}': {{width}} {{height}} {{{data}}} {{{hash}}},
{{/items}}
);

{{#items}}
%{{prefix}}{{fullname}} {
  // Available properties:
  // prefix: {{prefix}};
  // width: {{{width}}};
  // height: {{height}};
  // filename: {{filename}};
  // basename: {{basename}};
  // dirname: {{dirname}};
  // ext: {{ext}};
  // path: {{{path}}};
  // fullname: {{{fullname}}};
  // mime: {{{mime}}};
  // hash: {{{ hash }}};
  background-image: inline-image('{{{ path }}}');
}
{{/items}}
